name: 도커 이미지 CI - dev branch
on:
  push:
    branches: [ "dev" ]


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: ✨ Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradlew 권한 설정
        run: chmod +x ./gradlew

      - name: Jar 파일 빌드
        run: ./gradlew bootJar

      - name: DockerHub에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: 도커 빌드 & 도커 이미지 push
        if: contains(github.ref, 'main')
        run: |
          docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      ## deploy to production
      - name: EC2 도커 배포 단계
        uses: appleboy/ssh-action@master
        id: deploy
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.SERVER_IP }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            sudo docker stop backend-spring-8080
            sudo docker rm backend-spring-8080
            sudo docker rmi -f ${{ secrets.DOCKER_USERNAME }}/backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            sudo docker run -d -p 8080:8080 --name backend-spring-8080 ${{ secrets.DOCKER_USERNAME }}/backend:latest
            sudo docker image prune -f